; vim: set fileencoding=utf-8 :
; Andre Anjos <andre.anjos@idiap.ch>
; Mon 16 Apr 08:29:18 2012 CEST

; This is the configuration file for buildout. It is a windows-init style file
; divided into sections. This is probably the most minimalistic example you can
; have.
;
; The first section of this file defines to which other sections buildout will
; look at for information. We only have 1 other section (or part) to look at,
; the 'python' section.

[buildout]
parts = python

; We will be 'developing' the current package, so we should put '.' here
develop = .

; Names of other packages that we need installed locally, including this one.
; You can use this instruction here to 'augment' the portfolio of packages that
; will be available at this local installation. This happens besides what has
; already been described at your package's setup.py. So, don't repeat those 
; requirements here unless you would like to define specific version numbers
; for testing purposes.
eggs = bob.project.example
;      ipython ; IPython interpreter, if you don't have that installed already
;      ipdb ; Debugger with syntax highlighting and auto-completion

[python]
recipe = zc.recipe.egg
interpreter = python
eggs = ${buildout:eggs}
initialization =
    import os
    if os.environ.has_key('PYTHONSTARTUP') and os.environ['PYTHONSTARTUP']: execfile(os.environ['PYTHONSTARTUP'])

; Enable this section to give you an ipython prompt inside your binary
; directory. Also go up to the section 'buildout' and add 'ipython' as one of
; the 'parts' entry so this section is actually executed
;[ipython]
;recipe = zc.recipe.egg
;eggs = ipython
;       ${buildout:eggs}

; Enable this section to add an automated test runner in your binary
; directory. Also go up to the section 'buildout' and add 'tests' as one of
; the 'parts' entry so this section is actually executed
;[tests]
;recipe = pbp.recipe.noserunner
;eggs = ${buildout:eggs}
;script = unittests.py
;interpreter = ${buildout:bin-directory}/python
